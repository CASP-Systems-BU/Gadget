################################################################ build the first event generator 
#options: (tracefile, gadget)
first.event.generator.type = tracefile
first.event.generator.key.index = 0
first.event.generator.event.time.index = 2
first.event.generator.event.type.index = 4
first.event.generator.file.path = tasks-input.txt 
first.event.generator.watermark.frequency = 1
################################################### build the second event generator (if needed for example for joins)
second.event.generator.type = tracefile
second.event.generator.key.index = 0
second.event.generator.event.time.index = 1
second.event.generator.event.type.index = 2
second.event.generator.file.path = jobs.txt
second.event.generator.watermark.frequency = 1
###################################################
####################################################### 
#if you wish to build your own event generator (not reading for event files)- you replace the event generators, with the following example

#first.event.generator.type = gadget

#=== key popularity distribution for the first event generator =======
#options(constant, hotspot, zipf, sequential, uniform)
#first.event.generator.key.popularity.distrib.type = zipf
#first.event.generator.key.popularity.distrib.params.s = 1
#first.event.generator.key.popularity.distrib.params.keyspacesize= 1000000
first.event.generator.key.popularity.distrib.params.s

#==== event time distribution for the first event generator
#options(exponential, normal, constant, uniform)
#first.event.generator.event.occurrence.gap.distrib.type = exponential
#first.event.generator.event.occurrence.gap.distrib.params.lambda= 10
#first.event.generator.watermark.frequency = 1
#first.event.generator.outoforder.percentage = 2
#first.event.generator.lateness.threshold = 3;




################################################################ build the operator
#options(tumbling.all.incremental, tumbling.all.holistic, tumbling.keyed.incremental,
#tumbling.keyed.holistic, sliding.all.incremental, sliding.all.holistic, sliding.keyed.incremental,
#sliding.keyed.holistic, join.tumbling,  join.sliding, join.interval, continuous.join,  flink.replayer, ycsb.replayer)
operator.type= tumbling.keyed.incremental
expected.num.operations = 1000000
window.length = 5
trace.file.path = -
#sliding.length = 1
#upper.bound = 180
#lower.bound = -120

#******* make a key popularity distribution for the windows key (keys used to access state store) (no need to change this) 
#options(constant, hotspot, zipf, sequential, uniform)
operator.key.popularity.distrib.type = sequential
operator.key.popularity.distrib.params.keyspacesize = 1000000000

#options(exponential, constant, uniform, normal)
#********  key size distribution (keys used to access state store)
operator.key.size.distrib.type = constant
operator.key.size.distrib.params.constant = 10

#******** value size distribution (values that are inserted to state store)
#options(exponential, constant, uniform, normal)
operator.value.size.distrib.type = constant
operator.value.size.distrib.params.constant = 10

################################################################### build the wrapper ( where the generated operations go- file or a DB)
# options( file - rocksdb- lethe- berkeley - faster)- If file is chosen  Gadget dumps the generated operations on the file
wrapper.type = rocksdb
wrapper.path = /Users/showanasyabi/Desktop/experGadget


##======================== arrival time distribution for the first event generator
#first.event.generator.arrival.interarrival.distrib.type = exponential
#first.event.generator.arrival.interarrival.distrib.params.lambda=10












