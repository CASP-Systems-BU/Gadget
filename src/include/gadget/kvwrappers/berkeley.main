//
// Created by Showan Asyabi on 4/21/21.
//

#ifndef GADGET_BEREKLY_H
#define GADGET_BEREKLY_H

#include <memory>
#include <string>
#include <vector>
#include <atomic>
#include <cinttypes>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <random>
#include <string>

#include <cstdio>
#include <fstream>
#include <iostream>
#include <stdlib.h>
#include <string>
#include <assert.h>
#include <string.h>
#include <chrono>
#include <atomic>
#include <cinttypes>
#include <numeric>
#include <vector>
#include <algorithm>
#include <filesystem>
#include <cstring>
#include <sys/types.h>
#include <sys/stat.h>


#include "include/gadget/performanceMetrics.h"
#include "include/gadget/kvwrappers/kvwrapper.h"
typedef std::chrono::high_resolution_clock::time_point TimeVar;


#include <db_cxx.h>





class BerkeleyDBWrapper: public KVWrapper {
public:
    explicit BerkeleyDBWrapper(std::string path) {
        //TODO fixme
        kDBPath = path;
        responseTime = 0;
        dupIsEnabled = false;
        mergeExist = false;
    }

    bool connect() override {
        pdb = new Db(NULL, 0);
        file_name = "easyabi.db"; // it seems it has problem with name "access.db" when duplicate is turned on

        int pstatus = pdb->set_pagesize(1024);    //1024 bytes
        int cstatus = pdb->set_cachesize(0, 256 * 1024 * 1024,
                                         1);
        int ostatus = pdb->open(NULL, file_name, NULL, DB_BTREE, DB_CREATE, 0);

        std::cout << "Connected to BerkeleyDB successfully" << std::endl;
        //unitTest();
        return true;
    }

    bool disconnect() override {
        if (pdb != NULL) {
            pdb->close(0);
            delete pdb;
            // You have to choose and delete an existing handle, then create a new one before you can use it to remove a database (file).
            pdb = new Db(NULL, 0);
            pdb->remove(file_name, NULL, 0);
            //delete pdb;
        }
        printf("BerkeleyDB  is closed \n");
        return true;
    }




    void runBatchLatency()  override { // new version - merge: get-append-put it is faster than dup keys

        uint64_t idx = 0;
        uint64_t  valSize = (valuesList[0]).length();;
        uint64_t  keySize = (keysList[0]).length();
        uint64_t  loopSize =   keysList.size();
        responseTimes.resize(operationsList.size());
        assert(valuesList.size() == keysList.size());
        assert(operationsList.size() == keysList.size());
        int status = 0;

        while (idx < loopSize) {
            switch (operationsList[idx]) {
                case Operation::putOpr: {
                    startTime = std::chrono::high_resolution_clock::now();
                    Dbt dkey(const_cast<char*>(keysList[idx].c_str()), keySize + 1);
                    Dbt dval(const_cast<char*>(valuesList[idx].c_str()), valSize + 1);
                    status = pdb->put(NULL, &dkey, &dval, 0);
                    finishTime = std::chrono::high_resolution_clock::now();
                    assert(status == 0);

                    break;
                }
                case Operation::getOpr: {
                    startTime = std::chrono::high_resolution_clock::now();

                    std::size_t  oldValueSize;
                    Dbt dkey(const_cast<char *>(keysList[idx].c_str()), keySize + 1);
                    Dbt dval;
                    status = pdb->get(NULL, &dkey, &dval, 0);
                    oldValueSize = dval.get_size();
                    char buffer[oldValueSize];
                    std::memcpy(buffer, dval.get_data(), oldValueSize );

                    finishTime = std::chrono::high_resolution_clock::now();
                    break;
                }

                case Operation::mergeOpr: // we translate merge to a get and a put operation
                {
                    startTime = std::chrono::high_resolution_clock::now();

                    Dbt dkey(const_cast<char *>(keysList[idx].c_str()), keySize + 1);
                    Dbt dval;
                    std:size_t  oldValueSize;
                    status = pdb->get(NULL, &dkey, &dval, 0);
                    if (status == 0) {// successful
                        oldValueSize = dval.get_size();
                        char buffer[oldValueSize + valSize];
                        std::memcpy(buffer, dval.get_data(), oldValueSize );
                        std::memset(buffer + oldValueSize,'1', valSize);
                        Dbt dval(buffer, oldValueSize +  valSize);
                        status =  pdb->put(NULL, &dkey, &dval, 0);
                        assert(status == 0);

                    } else { // this is the first merge
                        Dbt dkey(const_cast<char *>(keysList[idx].c_str()), keySize + 1);
                        char buffer[valSize];
                        std::memset(buffer, '0', valSize);
                        Dbt dval(buffer, valSize);
                        status =  pdb->put(NULL, &dkey, &dval, 0);
                        assert(status == 0);
                    }



                    finishTime = std::chrono::high_resolution_clock::now();
                    assert(status == 0);
                    break;
                }
                case Operation::deleteOpr:
                {
                    startTime = std::chrono::high_resolution_clock::now();
                    Dbt dkey(const_cast<char*>(keysList[idx].c_str()), keySize + 1);
                    status = pdb->del(NULL, &dkey, 0);
                    finishTime = std::chrono::high_resolution_clock::now();
                    assert(status == 0);
                    break;
                }

            }
            auto commandExecutionTime = std::chrono::duration_cast<std::chrono::microseconds>( finishTime - startTime ).count();
            responseTimes[idx] = commandExecutionTime;
            idx ++;
        }


    }




    double runBatchThroughput() override{  // second edition : merge : get append put

        assert(valuesList.size() > 0);
        assert(valuesList.size() == keysList.size());
        assert(valuesList.size() == operationsList.size());
        uint64_t idx = 0;
        uint64_t  valSize = valuesList[0].size();
        uint64_t  keySize = (keysList[0]).length();
        uint64_t  loopSize = keysList.size();
        responseTimes.resize(operationsList.size());
        int status = 0;
        startTime = std::chrono::high_resolution_clock::now();
        while (idx < loopSize ) {
            switch (operationsList[idx]) {
                case Operation::putOpr: {
                    Dbt dkey(const_cast<char*>(keysList[idx].c_str()), keySize + 1);
                    Dbt dval(const_cast<char*>(valuesList[idx].c_str()), valSize + 1);
                    status = pdb->put(NULL, &dkey, &dval, 0);
                    assert(status == 0);
                    break;
                }
                case Operation::getOpr: {
                    std::size_t  oldValueSize;
                    Dbt dkey(const_cast<char *>(keysList[idx].c_str()), keySize + 1);
                    Dbt dval;
                    status = pdb->get(NULL, &dkey, &dval, 0);
                    oldValueSize = dval.get_size();
                    char buffer[oldValueSize];
                    std::memcpy(buffer, dval.get_data(), oldValueSize );

                    break;
                }

                case Operation::mergeOpr:
                {
                    // make the key
                    Dbt dkey(const_cast<char *>(keysList[idx].c_str()), keySize + 1);
                    Dbt dval;
                    std:size_t  oldValueSize;

                    status = pdb->get(NULL, &dkey, &dval, 0);
                    if (status == 0) {// successful
                        oldValueSize = dval.get_size();
                        char buffer[oldValueSize + valSize];
                        std::memcpy(buffer, dval.get_data(), oldValueSize );
                        std::memset(buffer + oldValueSize,'1', valSize);
                        // write the new value
                        Dbt dval(buffer, oldValueSize +  valSize);
                        status =  pdb->put(NULL, &dkey, &dval, 0);
                        assert(status == 0);

                    } else { // this is the first merge
                        Dbt dkey(const_cast<char *>(keysList[idx].c_str()), keySize + 1);
                        char buffer[valSize];
                        std::memset(buffer, '0', valSize);
                        Dbt dval(buffer, valSize);
                        status =  pdb->put(NULL, &dkey, &dval, 0);
                        assert(status == 0);
                    }


                    break;

                }
                case Operation::deleteOpr: {
                    Dbt dkey(const_cast<char*>(keysList[idx].c_str()), keySize + 1);
                    status = pdb->del(NULL, &dkey, 0);
                    assert(status == 0);
                    break;

                }
            }

            idx ++;
        }
        finishTime = std::chrono::high_resolution_clock::now();
        auto ExperimentExecutionTime = std::chrono::duration_cast<std::chrono::microseconds>( finishTime - startTime ).count();
        return (double)operationsList.size()/ (double)ExperimentExecutionTime; // Throughput
    }


    void  dumpOperationsOnFile() {}
private:
    std::string connectionString_;
    std::string kDBPath;
    TimeVar startTime, finishTime;
    // TimeVar startTime2, finishTime2;
    std::string response;
    Db* pdb;
    const char *file_name;
    bool dupIsEnabled;

};

#endif //GADGET_BEREKLY_H